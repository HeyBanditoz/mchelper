image: registry.gitlab.com/heybanditoz/mchelper-build-image:java21-postgres16
before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle

cache:
    paths:
        - .gradle
        - build

stages:
    - build
    - test
    - visualize
    - deploy

package:
    stage: build
    script:
        - ./gradlew shadowJar --no-daemon
    artifacts:
        paths:
            - build/libs/*.jar
        expire_in: 1 week

test:
    stage: test
    script:
        - rc-service postgresql start
        # We love bash so much, this looks crazy, but you're just gonna have to trust me.
        - su -c "psql --command 'ALTER USER postgres WITH PASSWORD \$\$postgres\$\$;'" postgres
        # Create initial schema (tests build.gradle script
        - ln -s src/main/resources/sql sql
        - DB="postgres" HOST="127.0.0.1" USER="postgres" PASS="postgres" SCHEMA="public" ./gradlew update --no-daemon
        - DB="postgres" HOST="127.0.0.1" USER="postgres" PASS="postgres" SCHEMA="public" ./gradlew test jacocoTestReport --no-daemon
    needs: ["package"]
    dependencies:
        - package
    coverage: '/    - Instruction Coverage: ([0-9.]+)%/'
    artifacts:
        when: always
        paths:
            - build/reports/jacoco/test/**
            - build/reports/tests/test/**
        reports:
            junit: build/test-results/test/**/TEST-*.xml

coverage:
    stage: visualize
    image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
    cache: []
    script:
        # convert report from jacoco to cobertura, using relative project path
        - python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml $CI_PROJECT_DIR/src/main/java/ > build/reports/cobertura.xml
    needs: ["test"]
    dependencies:
        - test
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: build/reports/cobertura.xml

create_image:
    stage: deploy
    image: docker:28.4.0-dind
    cache: []
    services:
        - docker:28.4.0-dind
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - DOCKER_BUILDKIT=1 docker build -t $IMAGE_TAG .
        - docker push $IMAGE_TAG

#new_commands:
#    stage: deploy
#    needs: ["coverage"]
#    dependencies:
#        - coverage
#    script:
#        - cp -v COMMANDS.md COMMANDS_OLD.md
#        - echo "$PRIVATE_TOKEN" > token
#        - apt update
#        - apt -y install curl
#        - DB="postgres" HOST="127.0.0.1" USER="postgres" PASS="postgres" SCHEMA="public" gradle run --args="dumpcommands"
#        - bash push_commands_to_gitlab.sh
#    only:
#        - master
